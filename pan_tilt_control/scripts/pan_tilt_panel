#! /usr/bin/env python

###############################################################################
#
#
# Package:   RoadNarrows Robotics ROS Pan-Tilt Robot Package
#
# Link:      https://github.com/roadnarrows-robotics/pan_tilt
#
# ROS Node:  pan_tilt_panel
#
# File:      pan_tilt_panel.cpp
#
## \file 
##
## $LastChangedDate$
## $Rev$
##
## \brief Graphical panel interface with the pan_tilt_control node.
##
## \author Daniel Packard (daniel@roadnarrows.com)
## \author Robin Knight (robin.knight@roadnarrows.com)
##  
## \par Copyright:
##   (C) 2014.  RoadNarrows LLC.\n
##   (http://www.roadnarrows.com)\n
##   All Rights Reserved
##
# @EulaBegin@
# @EulaEnd@
#
###############################################################################

import sys
import os
import time
import math
import getopt

from Tkinter import *
from Tkconstants import *
from tkFileDialog import *
import tkFont

from PIL import Image, ImageTk

import webbrowser
import xml.parsers.expat as expat

import roslib; roslib.load_manifest('pan_tilt_control')
import rospy
from std_msgs.msg import Float64

import actionlib
from actionlib_msgs.msg import GoalStatus
import trajectory_msgs.msg

from industrial_msgs.msg import RobotMode
from industrial_msgs.msg import TriState

from pan_tilt_control.msg import RobotStatusExtended
from pan_tilt_control.msg import JointStateExtended
from pan_tilt_control.msg import ServoHealth
from pan_tilt_control.msg import OpState
from pan_tilt_control.msg import ProductInfo

from pan_tilt_control.srv import ClearAlarms
from pan_tilt_control.srv import EStop
from pan_tilt_control.srv import Freeze
from pan_tilt_control.srv import GetProductInfo
from pan_tilt_control.srv import GotoZeroPt
from pan_tilt_control.srv import Pan
from pan_tilt_control.srv import Release
from pan_tilt_control.srv import ResetEStop
from pan_tilt_control.srv import Sweep

from pan_tilt_control.Utils import *
from pan_tilt_control.PanelConfig import *
from pan_tilt_control.AboutDlg import AboutDlg
from pan_tilt_control.WarnDlg import WarnDlg
from pan_tilt_control.MoveDlg import MoveDlg
from pan_tilt_control.ACCalibrate import *


# ------------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------------

## \brief Application version. Update as needed. 
appVersion = '1.0.0'

## \brief Image search paths.
imagePath = [
  "/prj/pkg/Hekateros/share/images",
  "/usr/local/share/Hekateros/images",
  "/prj/pkg/appkit/share/images",
  "/usr/local/share/appkit/images"
]

## \brief Alarm strings.
alarmStrings = {
  ServoHealth.ALARM_NONE:         "ok",
  ServoHealth.ALARM_VOLTAGE:      "V",
  ServoHealth.ALARM_ANGLE:        "pos",
  ServoHealth.ALARM_TEMP:         "T",
  ServoHealth.ALARM_CMD_RANGE:    "",
  ServoHealth.ALARM_CHECKSUM:     "",
  ServoHealth.ALARM_LOAD:         "load",
  ServoHealth.ALARM_INSTRUCTION:  ""
}

## \brief Common foreground colors.
fgColors = {
  'normal':   'black',
  'ok':       '#008800',
  'focus':    '#0000aa',
  'warning':  '#aa6600',
  'error':    '#cc0000'
}


# ------------------------------------------------------------------------------
# Class window
# ------------------------------------------------------------------------------

##
## \brief Window class supporting application.
##
class window(Frame):
  #
  ## \brief Constructor.
  ##
  ## \param master  Window parent master widget.
  ## \param cnf     Configuration dictionary.
  ## \param kw      Keyword options.
  #
  def __init__(self, master=None, cnf={}, **kw):
    # intialize window data
    kw = self.initData(kw)

    Frame.__init__(self, master=master, cnf=cnf, **kw)
    self.master.title("Pan-Tilt Control Panel")
    self.grid(row=0, column=0, padx=5, pady=5)

    # craete and show widgets
    self.createWidgets()

  #
  ## \brief Initialize class state data.
  ##
  ## Any keywords for this application specific window that are not supported 
  ## by the Frame Tkinter class must be removed.
  ##
  ## \param kw      Keyword options.
  ##
  ## \return Modified keywords sans this specific class.
  #
  def initData(self, kw):
    self.m_bHasJointPanel = False # joint state panel [not] created 
                                  # application configuration
    self.m_config         = ConfigDlg.ConfigDft
    self.m_icons          = {}    # must keep loaded icons referenced
    self.m_wBttn          = {}    # button widgets
    self.m_keysFewMoves   = []    # gui button keys depending on calibration
    self.m_keysNoMoves    = []    # gui button keys depending on robot mode
    self.m_robotStatus    = {}    # robot status widgets, variables, and values
    self.m_robotJoint     = {}    # robot joint state widgets, variables, etc.
    self.m_robotServo     = {}    # master servo to joint name map
                                  # calibration state
    self.m_calibState     = \
      {
        'calibrating':  False,    # [not] calibrating
        'ac':           None,     # calibration action client
        'id':           0         # after id
      }

    if kw.has_key('config'):
      self.m_config = kw['config']
      del kw['config']
    if kw.has_key('pub_joint_move_cb'):
      self.cbMoveRobot = kw['pub_joint_move_cb']
      del kw['pub_joint_move_cb']

    return kw

  #
  ## \brief Create gui widgets with supporting data and show.
  #
  def createWidgets(self):
    self.m_imageLoader = ImageLoader(py_pkg='pan_tilt_control.images',
                                      image_paths=imagePath)
    self.createHeading()
    self.createLeftButtons()
    self.createCenterPanel()
    self.createRightButtons()
    self.createStatusBar()
    self.updateButtonState(self.m_keysFewMoves, 'disabled')

  #
  ## \brief Create top gui heading.
  #
  def createHeading(self):
    # rn logo
    w = Label(self)
    self.m_icons['rn_logo'] = self.m_imageLoader.load("RNLogo48.png");
    if self.m_icons['rn_logo']:
      w['image'] = self.m_icons['rn_logo']
    else:
      w['text'] = 'rn'
      w['anchor'] = W
      w['width'] = 5
    w.grid(row=0, column=0, sticky=W)
    
    # top heading
    w = Label(self)
    w['font']   = ('Helvetica', 16)
    w['text']   = 'Pan-Tilt Control Panel'
    w['anchor'] = CENTER
    w.grid(row=0, column=1, sticky=E+W)

    # pantilt logo
    w = Label(self)
    self.m_icons['pan_tilt_logo'] = \
        self.m_imageLoader.load("icons/icon_pan_tilt_logo.png");
    if self.m_icons['pan_tilt_logo']:
      w['image'] = self.m_icons['pan_tilt_logo']
      w['anchor'] = E
    else:
      w['text'] = 'pantilt'
      w['anchor'] = E
      w['width'] = 5
    w.grid(row=0, column=2, sticky=E)
    
  #
  ## \brief Create gui left hand side buttons.
  #
  def createLeftButtons(self):
    wframe = Frame(self)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=1, column=0, padx=1, pady=3, sticky=N+W+E)

    row = 0

    # calibrate
    w = self.createButton(wframe, "Calibrate", "icons/icon_calib.png",
                            self.calibrate)
    w.grid(row=row, column=0, sticky=N+E+W)
    self.m_icons['calibrate_cancel'] = \
        self.m_imageLoader.load("icons/icon_calib_cancel.png")
    self.m_keysNoMoves.append('calibrate')

    # zero point
    row += 1
    w = self.createButton(wframe, "Zero\nPoint",
        "icons/icon_pan_tilt_zeropt.png",
                            self.gotoZeroPt)
    w.grid(row=row, column=0, sticky=N+E+W)
    self.m_keysFewMoves.append('zero_point')
    self.m_keysNoMoves.append('zero_point')

    # pan 
    row += 1
    w = self.createButton(wframe, "Pan",
        "icons/icon_pan_tilt_pan.png",
                            self.pan)
    w.grid(row=row, column=0, sticky=N+E+W)
    self.m_keysFewMoves.append('pan')
    self.m_keysNoMoves.append('pan')

    # sweep 
    row += 1
    w = self.createButton(wframe, "Sweep",
        "icons/icon_pan_tilt_sweep.png",
                            self.sweep)
    w.grid(row=row, column=0, sticky=N+E+W)
    self.m_keysFewMoves.append('sweep')
    self.m_keysNoMoves.append('sweep')

    # specify move
    row += 1
    w = self.createButton(wframe, "Specify\nMove",
                                  "icons/icon_pan_tilt_specify.png",
                                  self.specifyMove)
    w.grid(row=row, column=0, sticky=N+E+W)
    self.m_keysFewMoves.append('specify_move')
    self.m_keysNoMoves.append('specify_move')

  #
  ## \brief Create robot status and joint state center panel.
  #
  def createCenterPanel(self):
    self.m_wPanelFrame = Frame(self)
    self.m_wPanelFrame['borderwidth'] = 2
    self.m_wPanelFrame['relief'] = 'ridge'
    self.m_wPanelFrame.grid(row=1, column=1, padx=1, pady=3, sticky=N+W+E)

    self.createRobotStatusPanel(self.m_wPanelFrame, 0)
    self.createJointStatePanelHdr(self.m_wPanelFrame, 1)
    self.createNavPanel(self.m_wPanelFrame, 2);

  #
  ## \brief Create robot status upper center panel.
  ##
  ## \param parent  Parent widget
  ## \param row     Row in parent widget.
  #
  def createRobotStatusPanel(self, parent, row):
    wframe = LabelFrame(parent, text='Robot Status')
    wframe['font'] =('Helvetica', 12)
    wframe['fg'] = fgColors['focus']
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=row, column=0, padx=1, pady=3, sticky=N+W+E)

    width = 20
    row   = 0
    col   = 0

    # robot mode status
    var = StringVar()
    text, color = self.toRobotMode(RobotMode.AUTO)
    var.set("Mode: " + text)
    w = Entry(wframe)
    w['borderwidth'] = 2
    w['relief']   = 'flat'
    w['width']    = width
    w['textvar']  = var
    w['fg']       = color
    w['state']    = 'readonly'
    #w['relief']   = 'groove'
    w.grid(row=row, column=col, padx=0, pady=0, sticky=W+E)
    d = {'val': RobotMode.AUTO, 'var': var, 'w': w}
    self.m_robotStatus['mode'] = d

    col += 1

    # robot calibration status
    var = StringVar()
    text, color = self.toCalib(TriState.FALSE)
    var.set("State: " + text)
    w = Entry(wframe)
    w['borderwidth'] = 2
    w['relief']   = 'flat'
    w['width']    = width
    w['textvar']  = var
    w['fg']       = color
    w['state']    = 'readonly'
    #w['relief']   = 'groove'
    w.grid(row=row, column=col, padx=0, pady=0, sticky=W+E)
    d = {'val': TriState.FALSE, 'var': var, 'w': w}
    self.m_robotStatus['calibration'] = d

    col += 1

    spacer = Label(wframe, text=' ', width=15)
    spacer.grid(row=row, column=col, padx=0, pady=0, sticky=W+E)

    col += 1

    wframe = Frame(wframe)
    wframe['borderwidth'] = 0
    wframe['relief'] = 'flat'
    wframe.grid(row=row, column=col, padx=1, pady=3, sticky=N+E)

    self.m_icons['led_dark']  = \
        self.m_imageLoader.load("icons/icon_led_dark_16.png")
    self.m_icons['led_green'] = \
        self.m_imageLoader.load("icons/icon_led_green_16.png")
    self.m_icons['led_red']   = \
        self.m_imageLoader.load("icons/icon_led_red_16.png")

    row = 0
    col = 0

    # motors powered status
    w = Label(wframe)
    w['text']     = 'Motors'
    w['width']    = width
    w['justify']  = RIGHT
    w['anchor']   = E
    w['relief']   = 'flat'
    w.grid(row=row, column=col, sticky=E+W)
    d = {'val': None, 'var': None, 'w': w}
    self.m_robotStatus['morots_label'] = d

    col += 1

    # motors icon
    w = Label(wframe)
    w['image'] = self.m_icons['led_dark']
    w['justify'] = LEFT
    w.grid(row=row, column=col, sticky=W+E)
    d = {'val': TriState.OFF, 'var': None, 'w': w}
    self.m_robotStatus['motors_led'] = d

    col += 1

    # moving status
    w = Label(wframe)
    w['text']     = 'Moving'
    w['width']    = width
    w['justify']  = RIGHT
    w['anchor']   = E
    w['relief']   = 'flat'
    w.grid(row=row, column=col, sticky=E+W)
    d = {'val': None, 'var': None, 'w': w}
    self.m_robotStatus['moving_label'] = d

    col += 1

    # moving icon
    w = Label(wframe)
    w['image'] = self.m_icons['led_dark']
    w['justify'] = LEFT
    w.grid(row=row, column=col, sticky=W+E)
    d = {'val': TriState.OFF, 'var': None, 'w': w}
    self.m_robotStatus['moving_led'] = d

    col += 1

    # robot alarms status
    w = Label(wframe)
    w['text']     = 'Alarms'
    w['width']    = width
    w['justify']  = RIGHT
    w['anchor']   = E
    w['relief']   = 'flat'
    w.grid(row=row, column=col, sticky=E+W)
    d = {'val': None, 'var': None, 'w': w}
    self.m_robotStatus['alarms_label'] = d

    col += 1

    # alarms icon
    w = Label(wframe)
    w['image'] = self.m_icons['led_dark']
    w['justify'] = LEFT
    w.grid(row=row, column=col, sticky=W+E)
    d = {'val': TriState.OFF, 'var': None, 'w': w}
    self.m_robotStatus['alarms_led'] = d

    col += 1

    # robot estop status
    w = Label(wframe)
    w['text']     = 'EStop'
    w['width']    = width
    w['justify']  = RIGHT
    w['anchor']   = E
    w['relief']   = 'flat'
    w.grid(row=row, column=col, sticky=E)
    d = {'val': None, 'var': None, 'w': w}
    self.m_robotStatus['estop_label'] = d

    col += 1

    # estop icon
    w = Label(wframe)
    w['image'] = self.m_icons['led_dark']
    w['justify'] = LEFT
    w.grid(row=row, column=col, sticky=E)
    d = {'val': TriState.OFF, 'var': None, 'w': w}
    self.m_robotStatus['estop_led'] = d

  #
  ## \brief Create joint state lower center panel headers.
  ##
  ## \param parent  Parent widget.
  ## \param row     Row in parent widget.
  #
  def createJointStatePanelHdr(self, parent, row):
    wframe = LabelFrame(parent, text='Joint State')
    wframe['font'] =('Helvetica', 12)
    wframe['fg'] = fgColors['focus']
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=row, column=0, padx=1, pady=3, sticky=N+W+E)
    self.m_wJointStateFrame = wframe

    helv  = tkFont.Font(family="Helvetica",size=10,weight="bold")
    width = 12
    padx  = 2
    pady  = 0
    row   = 0
    col   = 0

    # top rows of labels
    for text in ['', '', '',
        ' Position  ',
        ' Odometer  ',
        ' Encoder   ',
        ' Velocity  ',
        '  Speed    ',
        '  Effort   ',
        'Temperature',
        ' Voltage   ',
        '']:
      w = Label(wframe, width=width, padx=padx, pady=pady, anchor=W,
          font=helv, text=text)
      w.grid(row=row, column=col, sticky=W)
      col += 1

    helv = tkFont.Font(family="Helvetica",size=10,weight="bold",underline=True)
    row  = 1
    col  = 0

    # second rows of labels or units
    for text in [
        'Joint      ',
        'Servo Id   ',
        'State      ',
        ' (degrees) ',
        '  (ticks)  ',
        '  (ticks)  ',
        '(% of max) ',
        '   (raw)   ',
        '   (raw)   ',
        '    (C)    ',
        '  (volts)  ',
        'Alarms     ']:
      w = Label(wframe, width=width, padx=padx, pady=pady, anchor=W,
          font=helv, text=text)
      w.grid(row=row, column=col, sticky=W)
      col += 1


  #
  ## \brief Create joint state lower center panel state.
  ##
  ## \param joint   Joint state
  #
  def createJointStatePanel(self, joint):
    wframe = self.m_wJointStateFrame

    width = 12

    for i in range(0, len(joint.name)):
      name = joint.name[i]
      self.m_robotJoint[name] = {}

      row = 3 + i;
      col = 0

      # joint
      w = Label(wframe, anchor=W, text=name)
      w['width'] = width
      w.grid(row=row, column=col, sticky=W)

      # master servo id
      col += 1
      var = IntVar()
      var.set(ord(joint.master_servo_id[i]))
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['servo_id'] = d
      self.m_robotServo[ord(joint.master_servo_id[i])] = name
    
      # joint state
      col += 1
      var = StringVar()
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['state'] = d
    
      # position
      col += 1
      var = DoubleVar()
      var.set(0.0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['position'] = d
    
      # odometer
      col += 1
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['odometer'] = d
    
      # encoder
      col += 1
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['encoder'] = d
    
      # velocity
      col += 1
      var = DoubleVar()
      var.set(0.0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['velocity'] = d
    
      # raw speed
      col += 1
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['speed'] = d
    
      # raw effort
      col += 1
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['effort'] = d
    
      # temperature
      col += 1
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['temperature'] = d
    
      # voltage
      col += 1
      var = DoubleVar()
      var.set(0.0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['voltage'] = d
    
      # alarms
      col += 1
      var = StringVar()
      var.set("ok")
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                            fg=fgColors['ok'], state='readonly')
      w['width'] = width
      w.grid(row=row, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['alarms'] = d

      self.update_idletasks()

    self.m_bHasJointPanel = True
    
  #
  ## \brief Create navigation panel
  ##
  ## \param parent  Parent widget
  ## \param row     Row in parent widget.
  #
  def createNavPanel(self, parent, row):
    wframe = Frame(parent)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=row, column=0, padx=1, pady=3, sticky=N+W+E)

    row = 0
    col = 0

    spacer = Frame(wframe, width=410, height=20)
    spacer.grid(row=row, column=col, padx=0, pady=0, sticky=W+E)

    row  += 1

    # up
    w = self.createButton(wframe, "Tilt\nUp", "icons/icon_up.png", self.tiltUp)
    w.grid(row=row, column=2, sticky=N+E+W)
    self.m_keysFewMoves.append('tilt_up')
    self.m_keysNoMoves.append('tilt_up')

    row += 1

    # left
    w = self.createButton(wframe, "Pan\nLeft", "icons/icon_left.png",
        self.panLeft)
    w.grid(row=row, column=1, sticky=N+E+W)
    self.m_keysFewMoves.append('pan_left')
    self.m_keysNoMoves.append('pan_left')

    # down
    w = self.createButton(wframe, "Tilt\nDown", "icons/icon_down.png",
        self.tiltDown)
    w.grid(row=row, column=2, sticky=N+E+W)
    self.m_keysFewMoves.append('tilt_down')
    self.m_keysNoMoves.append('tilt_down')

    # right
    w = self.createButton(wframe, "Pan\nRight", "icons/icon_right.png",
        self.panRight)
    w.grid(row=row, column=3, sticky=N+E+W)
    self.m_keysFewMoves.append('pan_right')
    self.m_keysNoMoves.append('pan_right')

    # manual pan/tilt target positions
    self.m_posManualPan  = 0.0
    self.m_posManualTilt = 0.0

    # bind navigate to keyboard
    self.bind_all('<Up>', self.keyNavUp)
    self.bind_all('<Left>', self.keyNavLeft)
    self.bind_all('<Down>', self.keyNavDown)
    self.bind_all('<Right>', self.keyNavRight)

  #
  ## \brief Create gui right hand side buttons.
  #
  def createRightButtons(self):
    wframe = Frame(self)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=1, column=2, padx=1, pady=3, sticky=N+W+E)

    # estop
    w = self.createButton(wframe, "ESTOP", "icons/icon_estop.png", self.estop,
                                  fg='red')
    w.grid(row=0, column=0, sticky=N+E+W)
    self.m_icons['estop_reset'] = \
        self.m_imageLoader.load("icons/icon_estop_reset.png")

    # freeze
    w = self.createButton(wframe, "Freeze",
                                  "icons/icon_pause.png", self.freeze)
    w.grid(row=1, column=0, sticky=N+E+W)
    self.m_keysNoMoves.append('freeze')

    # release
    w = self.createButton(wframe, "Release",
                                  "icons/icon_stop.png", self.release)
    w.grid(row=2, column=0, sticky=N+E+W)
    self.m_keysNoMoves.append('release')

    # clear alarms
    w = self.createButton(wframe, "Clear\nAlarms",
                                  "icons/icon_alarm.png", self.clearAlarms)
    w.grid(row=3, column=0, sticky=N+E+W)
    self.m_keysNoMoves.append('clear_alarms')

    # settings
    w = self.createButton(wframe, "Settings",
                                  "icons/icon_settings.png", self.settings)
    w.grid(row=4, column=0, sticky=N+E+W)

    # info
    w = self.createButton(wframe, "About",
                                  "icons/icon_info.png", self.about)
    w.grid(row=5, column=0, sticky=N+E+W)

    # quit
    w = self.createButton(wframe, "Quit", "icons/icon_exit.png", self.destroy,
                                  fg='red')
    w.grid(row=6, column=0, sticky=N+E+W)

  #
  ## \brief Create gui status bar at bottom of gui window.
  #
  def createStatusBar(self):
    wframe = Frame(self)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=2, column=0, columnspan=3, padx=1, pady=3, sticky=N+E+W+S)

    self.m_varStatus = StringVar()
    self.m_varStatus.set("Calibration required.")
    self.m_wStatusBar = Entry(wframe)
    self.m_wStatusBar['width']    = wframe['width']
    self.m_wStatusBar['relief']   = 'flat'
    self.m_wStatusBar['textvar']  = self.m_varStatus
    self.m_wStatusBar['fg']       = fgColors['normal']
    self.m_wStatusBar['state']    = 'readonly'
    self.m_wStatusBar.grid(row=0, column=0, padx=3, pady=3, sticky=N+E+W+S)

  #
  ## \brief Update button activation states.
  #
  def updateButtonState(self, keys, state):
    for key in keys:
      self.m_wBttn[key]['state'] = state

  #
  ## \brief Create button.
  ##
  ## \param parent    Parent widget.
  ## \param text      Button text.
  ## \param imagefile Image file name. None for no image.
  ## \param command   Callback for button push.
  ## \param fg        Foreground text color.
  ##
  ## \return Button widget.
  #
  def createButton(self, parent, text, imagefile, command, fg='black'):
    key = str.lower(text.replace("\n", "_"))
    self.m_icons[key] = self.m_imageLoader.load(imagefile)
    w = Button(parent)
    w['text']     = text
    if self.m_icons[key]:
      w['image']    = self.m_icons[key]
      w['compound'] = LEFT
      w['padx']     = 0
      w['pady']     = 0
      w['anchor']   = W
      w['width']    = 105
    else:
      w['anchor']   = CENTER
      w['width']    = 10
    w['fg']       = fg
    w['command']  = command
    self.m_wBttn[key] = w
    return self.m_wBttn[key]

  #
  ## \brief Destroy window callback.
  #
  def destroy(self):
    self.quit()

  #
  ## \brief (Cancel) calibration callback.
  #
  def calibrate(self):
    # not calibrating - so start calibration
    if not self.m_calibState['calibrating']:
      if self.m_config['warn_on_calib']:
        dlg = WarnDlg(master=self,
                      image="PanTiltZeroPt128.png",
                      msg="""\
For best calibration, place the pan-tilt near the zero point.
Make sure the workspace is clear of obstructions.""")
        if not dlg.m_result:
          return
      self.m_calibState['calibrating'] = True
      self.m_wBttn['calibrate']['image'] = self.m_icons['calibrate_cancel']
      self.m_wBttn['calibrate']['text'] = "Cancel\nCalibrate"
      self.showInfo("Calibrating pan-tilt.")
      self.update_idletasks()

      # create calibration action client, if not already created
      if self.m_calibState['ac'] is None:
        self.m_calibState['ac'] = ACCalibrate()

      # start calibration
      if not self.m_calibState['ac'].exec_calib(self.calibrate_monitor,
                                  timeout=1,
                                  force_recalib=self.m_config['force_recalib']):
        self.showError("Could not execute calibration. " \
                       "Is the pan_tilt_control node running?")
        self.calibrate_cancel()

      # check for completion
      else:
        self.m_calibState['id'] = self.after(100, self.calibrate_check_for_done)

    # calibrating - so cancel
    else:
      self.calibrate_cancel()
      self.showInfo("Calibration canceled.")
      
  #
  ## \brief Cancel calibration, setting data and widget state accordingly.
  #
  def calibrate_cancel(self):
      self.m_calibState['ac'].cancel()
      self.m_calibState['calibrating'] = False
      self.m_wBttn['calibrate']['image'] = self.m_icons['calibrate']
      self.m_wBttn['calibrate']['text'] = "Calibrate"
      if self.m_calibState['id'] != 0:
        self.m_calibState['id'] = 0
      self.showError("Calibration preempted.")
      self.update_idletasks()

  #
  ## \brief Check if calibration is complete.
  #
  def calibrate_check_for_done(self):
    state = self.m_calibState['ac'].get_action_state()
    if state == GoalStatus.PENDING or \
       state == GoalStatus.ACTIVE or \
       state == GoalStatus.PREEMPTING or \
       state == GoalStatus.RECALLING:
      self.m_calibState['id'] = self.after(100, self.calibrate_check_for_done)
    else:
      self.m_wBttn['calibrate']['image'] = self.m_icons['calibrate']
      self.m_wBttn['calibrate']['text'] = "Calibrate"
      self.m_calibState['calibrating'] = False
      self.m_calibState['id'] = 0
      calib_state = self.m_calibState['ac'].get_result().op.calib_state
      if calib_state == OpState.CALIBRATED:
        self.showInfo("Calibration complete.")
      else:
        self.showError("Calibration failed.")
      self.update_idletasks()

  #
  ## \brief monitor the calibration feedback.
  #
  def calibrate_monitor(self, feedback):
    if self.m_bHasJointPanel:
      self.showJointStates(feedback.joint)
  
  #
  ## \brief Go to zero point position callback.
  #
  def gotoZeroPt(self):
    try:
      rospy.wait_for_service("pan_tilt_control/goto_zero", timeout=1)
    except rospy.ROSException, e:
      self.showError('Goto zero point: ' + e.message + '.')
      return
    try:
      goto_zero_pt = rospy.ServiceProxy('pan_tilt_control/goto_zero', 
                                        GotoZeroPt)
      goto_zero_pt()
    except rospy.ServiceException, e:
      self.showError("Goto zero point failed: %s." % (e.message))
      return
    self.showInfo("Zero point.")
  
  #
  ## \brief Continuous pan callback.
  #
  def pan(self):
    try:
      rospy.wait_for_service("pan_tilt_control/pan", timeout=1)
    except rospy.ROSException, e:
      self.showError('Pan: ' + e.message + '.')
      return
    try:
      pan_forever = rospy.ServiceProxy('pan_tilt_control/pan', Pan)
      min_pos   = Float64()
      max_pos   = Float64()
      velocity  = Float64()
      min_pos   = degToRad(self.m_config['pan']['pan_min_pos'])
      max_pos   = degToRad(self.m_config['pan']['pan_max_pos'])
      velocity  = self.m_config['pan']['pan_vel']
      pan_forever(min_pos, max_pos, velocity)
    except rospy.ServiceException, e:
      self.showError("Pan failed: %s." % (e.message))
      return
    self.showInfo("Panning continuously.")
  
  #
  ## \brief Continuous sweep callback.
  #
  def sweep(self):
    try:
      rospy.wait_for_service("pan_tilt_control/sweep", timeout=1)
    except rospy.ROSException, e:
      self.showError('Sweep: ' + e.message + '.')
      return
    try:
      sweep_forever = rospy.ServiceProxy('pan_tilt_control/sweep', Sweep)
      # RDK TODO get values from config
      pan_min_pos   = Float64()
      pan_max_pos   = Float64()
      pan_velocity  = Float64()
      tilt_min_pos  = Float64()
      tilt_max_pos  = Float64()
      tilt_velocity = Float64()
      pan_min_pos   = degToRad(self.m_config['sweep']['pan_min_pos'])
      pan_max_pos   = degToRad(self.m_config['sweep']['pan_max_pos'])
      pan_velocity  = self.m_config['sweep']['pan_vel']
      tilt_min_pos  = degToRad(self.m_config['sweep']['tilt_min_pos'])
      tilt_max_pos  = degToRad(self.m_config['sweep']['tilt_max_pos'])
      tilt_velocity = self.m_config['sweep']['tilt_vel']
      sweep_forever(pan_min_pos,  pan_max_pos,  pan_velocity,
                    tilt_min_pos, tilt_max_pos, tilt_velocity)
    except rospy.ServiceException, e:
      self.showError("Sweep failed: %s." % (e.message))
      return
    self.showInfo("Sweepiing continuously.")
  
  #
  ## \brief Specify move callback.
  #
  def specifyMove(self):
    jointTrajectory  = trajectory_msgs.msg.JointTrajectory()
    jointTrajPoint   = trajectory_msgs.msg.JointTrajectoryPoint()  
    jointTrajectory.points.append(jointTrajPoint)
    for name,val in self.m_robotJoint.iteritems(): 
      jointTrajectory.joint_names.append(name)
      pos = self.m_robotJoint[name]['position']['var'].get()
      jointTrajPoint.positions.append(degToRad(pos))
      jointTrajPoint.velocities.append(10.0)
      jointTrajPoint.accelerations.append(0.0)
    dlg = MoveDlg(master=self, image='PanTiltInMotion.png',
                                trajectory=jointTrajectory)
    if not dlg.m_result:
      return
    else:
      self.moveRobot(jointTrajectory)
  
  #
  ## \brief Keyboard Up key event.
  ##
  ## \param event   Specific key event.
  #
  def keyNavUp(self, event):
    #print 'up key'
    if self.m_wBttn['tilt_up']['state'] == 'normal':
      #self.m_wBttn['tilt_up'].flash()
      self.tiltUp()

  #
  ## \brief Keyboard Down key event.
  ##
  ## \param event   Specific key event.
  #
  def keyNavDown(self, event):
    #print 'down key'
    if self.m_wBttn['tilt_down']['state'] == 'normal':
      #self.m_wBttn['tilt_down'].flash()
      self.tiltDown()

  #
  ## \brief Keyboard Left key event.
  ##
  ## \param event   Specific key event.
  #
  def keyNavLeft(self, event):
    #print 'left key'
    if self.m_wBttn['pan_left']['state'] == 'normal':
      #self.m_wBttn['pan_left'].flash()
      self.panLeft()

  #
  ## \brief Keyboard Right key event.
  ##
  ## \param event   Specific key event.
  #
  def keyNavRight(self, event):
    #print 'right key'
    if self.m_wBttn['pan_right']['state'] == 'normal':
      #self.m_wBttn['pan_right'].flash()
      self.panRight()

  #
  ## \brief Tilt up.
  #
  def tiltUp(self):
    pos = self.m_robotJoint['tilt']['position']['var'].get() - 10.0
    if math.fabs(pos-self.m_posManualTilt) > 0.5:
      self.m_posManualTilt = pos
      jointTrajectory = self.makeTrajectory(tilt=[pos, 10.0])
      self.moveRobot(jointTrajectory)

  #
  ## \brief Tilt down.
  #
  def tiltDown(self):
    pos = self.m_robotJoint['tilt']['position']['var'].get() + 10.0
    if math.fabs(pos-self.m_posManualTilt) > 0.5:
      self.m_posManualTilt = pos
      jointTrajectory = self.makeTrajectory(tilt=[pos, 10.0])
      self.moveRobot(jointTrajectory)

  #
  ## \brief Pan left.
  #
  def panLeft(self):
    pos = self.m_robotJoint['pan']['position']['var'].get() + 10.0
    if math.fabs(pos-self.m_posManualPan) > 0.5:
      self.m_posManualPan = pos
      jointTrajectory = self.makeTrajectory(pan=[pos, 10.0])
      self.moveRobot(jointTrajectory)

  #
  ## \brief Pan right.
  #
  def panRight(self):
    pos = self.m_robotJoint['pan']['position']['var'].get() - 10.0
    if math.fabs(pos-self.m_posManualPan) > 0.5:
      self.m_posManualPan = pos
      jointTrajectory = self.makeTrajectory(pan=[pos, 10.0])
      self.moveRobot(jointTrajectory)

  #
  ## \brief Make trajectory message from keywords.
  ## 
  ## \param kw  Keywords: name:[pos, vel] with pos in degrees, and vel in
  ##            percent.
  ## \return Return joint trajectory message.
  #
  def makeTrajectory(self, **kw):
    jointTrajectory  = trajectory_msgs.msg.JointTrajectory()
    jointTrajPoint   = trajectory_msgs.msg.JointTrajectoryPoint()  
    jointTrajectory.points.append(jointTrajPoint)
    for name, tgt in kw.iteritems():
      jointTrajectory.joint_names.append(name)
      jointTrajPoint.positions.append(degToRad(tgt[0]))
      jointTrajPoint.velocities.append(tgt[1])
      jointTrajPoint.accelerations.append(0.0)
    return jointTrajectory

  #
  ## \brief Move robot along trajectory
  #
  def moveRobot(self, trajectory):
    try:
      self.m_joint_cmd_pub.publish(trajectory)
      self.showInfo('Move on specified trajectory.')
    except rospy.ROSException, e:
      self.showError('joint_command: ' + e.message + '.')

  #
  ## \brief (Reset) emergency stop callback.
  #
  def estop(self):
    if self.m_robotStatus['estop_led']['val'] == TriState.FALSE:
      self.showResetEStop()
      try:
        rospy.wait_for_service("pan_tilt_control/estop", timeout=1)
      except rospy.ROSException, e:
        self.showError('Emergency stop: ' + e.message + '.')
        self.showEStop()
        return
      try:
        estop = rospy.ServiceProxy('pan_tilt_control/estop', EStop)
        estop()
      except rospy.ServiceException, e:
        self.showError("Emergency stop request failed: %s." % (e.message))
        self.showEStop()
        return
      self.showError("Pan-Tilt emergency stopped.")
    else:
      self.showEStop()
      try:
        rospy.wait_for_service("pan_tilt_control/reset_estop", timeout=1)
      except rospy.ROSException, e:
        self.showError('Reset emergency stop: ' + e.message + '.')
        self.showResetEStop()
        return
      try:
        reset_estop = rospy.ServiceProxy('pan_tilt_control/reset_estop',
                                          ResetEStop)
        reset_estop()
      except rospy.ServiceException, e:
        self.showError("Reset emergency stop request failed: %s." % (e.message))
        self.showResetEStop()
        return
      self.showInfo("Pan-Tilt emergency stop has been reset.")
  
  #
  ## \brief Show estop button.
  #
  def showEStop(self):
    self.m_wBttn['estop']['image'] = self.m_icons['estop']
    self.m_wBttn['estop']['text']   = "ESTOP"
    self.m_wBttn['estop']['fg']     = fgColors['error']
    self.update_idletasks()

  #
  ## \brief Show reset estop button.
  #
  def showResetEStop(self):
    self.m_wBttn['estop']['image']  = self.m_icons['estop_reset']
    self.m_wBttn['estop']['text']   = "Reset\nESTOP"
    self.m_wBttn['estop']['fg']     = fgColors['normal']
    self.update_idletasks()

  #
  ## \brief Freeze pan-tilt callback.
  #
  def freeze(self):
    try:
      rospy.wait_for_service("pan_tilt_control/freeze", timeout=1)
    except rospy.ROSException, e:
      self.showError('Freeze pan-tilt: ' + e.message + '.')
      return
    try:
      freeze = rospy.ServiceProxy('pan_tilt_control/freeze', Freeze)
      freeze()
    except rospy.ServiceException, e:
      self.showError("Freeze pan-tilt request failed: %s." % (e.message))
      return
    self.showInfo("Pan-Tilt has been frozen at current position.")

  #
  ## \brief Release pan-tilt callback.
  #
  def release(self):
    if self.m_config['warn_on_release']:
      dlg = WarnDlg(master=self,
                    image="PanTiltFalling.png",
                    msg="""\
The pan-tilt motors will become unpowered.
The pan-tilt may fall if not in a stable position.""")
      if not dlg.m_result:
        return
    try:
      rospy.wait_for_service("pan_tilt_control/release", timeout=1)
    except rospy.ROSException, e:
      self.showError('Release pan-tilt: ' + e.message + '.')
      return
    try:
      release = rospy.ServiceProxy('pan_tilt_control/release', Release)
      release()
    except rospy.ServiceException, e:
      self.showError("Release pan-tilt request failed: %s." % (e.message))
      return
    self.showInfo("Pan-Tilt has been release, all motors are unpowered.")

  #
  ## \brief Clear alarms callback.
  #
  def clearAlarms(self):
    try:
      rospy.wait_for_service("pan_tilt_control/clear_alarms", timeout=1)
    except rospy.ROSException, e:
      self.showError('Clear alarms: ' + e.message + '.')
      return
    try:
      clear_alarms = rospy.ServiceProxy('pan_tilt_control/clear_alarms',
                                          ClearAlarms)
      clear_alarms()
    except rospy.ServiceException, e:
      self.showError("Clear alarms request failed: %s." % (e.message))
      return
    self.showInfo("Alarms cleared.")
  
  #
  ## \brief Open settings dialog callback.
  #
  def settings(self):
    dlg = ConfigDlg(master=self, config=self.m_config)
    self.m_config = dlg.m_config
  
  #
  ## \brief Show about dialog callback.
  #
  def about(self):
    prodInfo = None
    try:
      rospy.wait_for_service("pan_tilt_control/get_product_info", timeout=1)
    except rospy.ROSException, e:
      self.showError('Get product info: ' + e.message + '.')
    else:
      try:
        get_product_info = rospy.ServiceProxy(
                                          'pan_tilt_control/get_product_info',
                                          GetProductInfo)
        rsp = get_product_info()
        prodInfo = rsp.i
      except rospy.ServiceException, e:
        self.showError("Get product info request failed: %s." % (e.message))
    dlg = AboutDlg(master=self, info=prodInfo, app_ver=appVersion)
  
  #
  ## \brief Update robot status.
  ##
  ## \param status  Robot status extended message.
  #
  def updateRobotStatus(self, status):
    self.showRobotStatus(status)

    # first update of joint state required first
    if self.m_bHasJointPanel:
      self.showServoHealth(status.servo_health)

  #
  ## \brief Update joint state.
  ##
  ## \param joint  Joint state extended message.
  #
  def updateJointStates(self, joint):
    # no joints
    if len(joint.name) == 0:
      return

    # first state message, 
    if not self.m_bHasJointPanel:
      self.createJointStatePanel(joint)

    self.showJointStates(joint)

  #
  ## \brief Show robot status.
  ##
  ## \param status  Robot status extended message.
  #
  def showRobotStatus(self, status):
    if status.mode.val == RobotMode.MANUAL or \
      status.e_stopped.val == TriState.TRUE:
      bNoMoves = True
    else:
      bNoMoves = False

    key = 'mode'
    if self.m_robotStatus[key]['val'] != status.mode.val:
      text, fg = self.toRobotMode(status.mode.val)
      self.m_robotStatus[key]['val'] = status.mode.val
      self.showEntry(self.m_robotStatus[key]['w'],
          self.m_robotStatus[key]['var'], "Mode: "+text, fg)
      if bNoMoves:
        state = 'disabled'
      else:
        state = 'normal'
      self.updateButtonState(self.m_keysNoMoves, state)

    key = 'calibration'
    if self.m_robotStatus[key]['val'] != status.is_calibrated.val:
      text, fg = self.toCalib(status.is_calibrated.val)
      self.m_robotStatus[key]['val'] = status.is_calibrated.val
      self.showEntry(self.m_robotStatus[key]['w'],
          self.m_robotStatus[key]['var'], "State: "+text, fg)
      if status.is_calibrated.val == TriState.TRUE:
        state = 'normal'
      else:
        state = 'disabled'
      if not bNoMoves:
        self.updateButtonState(self.m_keysFewMoves, state)

    key = 'motors_led'
    if self.m_robotStatus[key]['val'] != status.drives_powered.val:
      self.m_robotStatus[key]['val'] = status.drives_powered.val
      if status.drives_powered.val == TriState.ON:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_green'] 
      else:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_dark'] 

    key = 'moving_led'
    if self.m_robotStatus[key]['val'] != status.in_motion.val:
      self.m_robotStatus[key]['val'] = status.in_motion.val
      if status.in_motion.val == TriState.ON:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_green'] 
      else:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_dark'] 

    key = 'alarms_led'
    if self.m_robotStatus[key]['val'] != status.in_error.val:
      self.m_robotStatus[key]['val'] = status.in_error.val
      if status.in_error.val == TriState.TRUE:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_red'] 
      else:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_dark'] 

    key = 'estop_led'
    if self.m_robotStatus[key]['val'] != status.e_stopped.val:
      self.m_robotStatus[key]['val'] = status.e_stopped.val
      if status.e_stopped.val == TriState.TRUE:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_red'] 
      else:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_dark'] 
      if bNoMoves:
        state = 'disabled'
      else:
        state = 'normal'
      self.updateButtonState(self.m_keysNoMoves, state)

  #
  ## \brief Show joint state.
  ##
  ## \param joint  Joint state extended message.
  #
  def showJointStates(self, joint):
    for i in range(0, len(joint.name)):
      name = joint.name[i]
      if not self.m_robotJoint.has_key(name):
        continue

      key = 'state'
      val, fg = self.toJointState(joint.op_state[i].calib_state)
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'], val, fg)

      key = 'position'
      val, fg = self.toDeg(joint.position[i])
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'], val, fg)

      key = 'odometer'
      val = joint.odometer_pos[i]
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'],
                     val, fgColors['normal'])

      key = 'encoder'
      val = joint.encoder_pos[i]
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'],
                     val, fgColors['normal'])

      key = 'velocity'
      val, fg = self.toVelocity(joint.velocity[i])
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'], val, fg)

      key = 'speed'
      val = joint.raw_speed[i]
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'],
                     val, fgColors['normal'])

      key = 'effort'
      val, fg = self.toEffort(joint.effort[i])
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'], val, fg)

  #
  ## \brief Show servo health.
  ##
  ## \param health  Servo health message.
  #
  def showServoHealth(self, health):
    for i in range(0, len(health)):
      servo_id = health[i].servo_id
      if not self.m_robotServo.has_key(servo_id):
        continue

      name = self.m_robotServo[servo_id]

      key = 'temperature'
      val = int(health[i].temp)
      if self.m_robotJoint[name][key]['var'].get() != val:
        fg = self.toTemperatureColor(val)
        self.showEntry(self.m_robotJoint[name][key]['w'],
                       self.m_robotJoint[name][key]['var'], val, fg)

      key = 'voltage'
      val = health[i].voltage
      if self.m_robotJoint[name][key]['var'].get() != val:
        volts, fg = self.toVoltage(val)
        self.showEntry(self.m_robotJoint[name][key]['w'],
                       self.m_robotJoint[name][key]['var'], volts, fg)

      key = 'alarms'
      val, fg = self.toAlarms(health[i].alarm)
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                       self.m_robotJoint[name][key]['var'], val, fg)

  #
  ## \brief Show information message on status bar.
  ##
  ## \param msg   Info message string.
  #
  def showInfo(self, msg):
    self.m_wStatusBar["state"] = "normal"
    self.m_wStatusBar["fg"]    = fgColors['normal']
    self.m_varStatus.set(msg)
    self.m_wStatusBar["state"] = "readonly"

  #
  ## \brief Show error message on status bar.
  ##
  ## \param msg   Error message string.
  #
  def showError(self, msg):
    self.m_wStatusBar["state"] = "normal"
    self.m_wStatusBar["fg"]    = fgColors['error']
    self.m_varStatus.set(msg)
    self.m_wStatusBar["state"] = "readonly"

  #
  ## \brief Show text on read-only entry.
  ##
  ## \param w     Entry widget.
  ## \param var   Bound entry variable.
  ## \param val   Variable value.
  ## \param fg    Text foreground color.
  #
  def showEntry(self, w, var, val, fg='black'):
    w['state'] = 'normal'
    w['fg']    = fg
    var.set(val)
    w['state'] = 'readonly'

  def toRobotMode(self, mode):
    if mode == RobotMode.MANUAL:
      return ("Manual", fgColors['normal'])
    elif mode == RobotMode.AUTO:
      return ("Auto", fgColors['normal'])
    else:
      return (repr(mode), fgColors['error'])

  def toCalib(self, tristate):
    if tristate == TriState.FALSE:
      return ("Not calibrated", fgColors['normal'])
    elif tristate == TriState.TRUE:
      return ("Calibrated", fgColors['normal'])
    else:
      return (repr(tristate), fgColors['error'])

  def toMotorsPowered(self, tristate):
    if tristate == TriState.FALSE:
      return ("Unpowered", fgColors['normal'])
    elif tristate == TriState.TRUE:
      return ("Powered", fgColors['normal'])
    else:
      return (repr(tristate), fgColors['error'])

  def toJointState(self, opstate):
      if opstate == OpState.UNCALIBRATED:
        return ("uncalibrated", fgColors['error'])
      elif opstate == OpState.CALIBRATING:
        return ("calibrating", fgColors['focus'])
      elif opstate == OpState.CALIBRATED:
        return ("calibrated", fgColors['normal'])
      else:
        return (repr(opstate), fgColors['error'])

  def toDeg(self, rad):
    deg = math.degrees(rad)
    return round100th(deg), fgColors['normal']

  def toVelocity(self, percent):
    return round10th(percent), fgColors['normal']

  def toEffort(self, effort):
    absraw = math.fabs(effort)
    raw    = int(effort)
    if absraw < 900:
      return (raw, fgColors['normal'])
    elif absraw < 1000:
      return (raw, fgColors['warning'])
    else:
      return (raw, fgColors['error'])

  def toTemperatureColor(self, temp):
    if temp >= 75:
      return fgColors['error']
    elif temp >= 60:
      return fgColors['warning']
    else:
      return fgColors['normal']

  def toVoltage(self, volts):
    volts = round10th(volts)
    if volts >= 10.5 and volts <= 13.0:
      return (volts, fgColors['normal'])
    elif volts >= 9.5 and volts <= 13.5:
      return (volts, fgColors['warning'])
    else:
      return (volts, fgColors['error'])

  def toAlarms(self, alarms):
    if alarms == ServoHealth.ALARM_NONE:
      return (alarmStrings[ServoHealth.ALARM_NONE], fgColors['ok'])
    text = ""
    sep  = ""
    for bit in alarmStrings.keys():
      if bit & alarms:
        if len(alarmStrings[bit]) > 0:
          text += sep + alarmStrings[bit]
          sep = ','
    return (text, fgColors['error'])


# ------------------------------------------------------------------------------
# Exception Class usage
# ------------------------------------------------------------------------------

##
## \brief Unit test command-line exception class.
##
## Raise usage excpetion.
##
class usage(Exception):

  ##
  ## \brief Constructor.
  ##
  ## \param msg   Error message string.
  ##
  def __init__(self, msg):
    ## error message attribute
    self.msg = msg


# ------------------------------------------------------------------------------
# Class application
# ------------------------------------------------------------------------------

##
## \brief Pan-Tilt control panel.
##
class application():

  #
  ## \brief Constructor.
  #
  def __init__(self):
    self._Argv0 = os.path.basename(__file__)
    self.m_win = None

  #
  ## \brief Print usage error.
  ##
  ## \param emsg  Error message string.
  #
  def printUsageErr(self, emsg):
    if emsg:
      print "%s: %s" % (self._Argv0, emsg)
    else:
      print "%s: error" % (self._Argv0)
    print "Try '%s --help' for more information." % (self._Argv0)

  ## \brief Print Command-Line Usage Message.
  def printUsage(self):
    print \
"""
usage: %s [OPTIONS]
       %s --help

-h, --help                : Display this help and exit.
"""  % (self._Argv0, self._Argv0)
 
  #
  ## \brief Get command-line options
  ##  
  ## \param argv          Argument list. If not None, then overrides
  ##                      command-line arguments.
  ## \param [out] kwargs  Keyword argument list.  
  ##
  ## \return Parsed keyword arguments.
  #
  def getOptions(self, argv=None, **kwargs):
    if argv is None:
      argv = sys.argv

    self._Argv0 = os.path.basename(kwargs.get('argv0', __file__))

    # defaults
    kwargs['debug']     = False
    #kwargs['device']    = '/dev/ttyUSB0'
    #kwargs['baudrate']  = 1000000

    # parse command-line options
    try:
      opts, args = getopt.getopt(argv[1:], "d:b:?h",
          ['device=', 'baudrate=', 'help', ''])
    except getopt.error, msg:
      raise usage(msg)
    for opt, optarg in opts:
      if opt in ('-h', '--help', '-?'):
        self.printUsage()
        sys.exit(0)
      #elif opt in ('-d', '--device'):
      #  kwargs['device'] = optarg;
      #elif opt in ('-b', '--baudrate'):
      #  try:
      #    kwargs['baudrate'] = int(optarg)
      #  except ValueError:
      #    raise usage("%s=%s: NaN" % (opt, optarg))

    #if len(args) < 1:
    #  self.printUsageErr("No input xml file specified")
    #  sys.exit(2)
    #else:
    #  kwargs['filename'] = args[0]

    return kwargs

  #
  ## \brief Initialize interface to pan_tilt_control.
  #
  def initRobot(self):
    self.m_win.showInfo("Initializing interface to pan-tilt.")

    rospy.init_node("pan_tilt_panel")

    # subscribe to extended robot status data
    rospy.Subscriber("pan_tilt_control/robot_status_ex", 
                     RobotStatusExtended, 
                     self.m_win.updateRobotStatus) 

    # subscribe to extended joint state data
    rospy.Subscriber("pan_tilt_control/joint_states_ex", 
                     JointStateExtended, 
                     self.m_win.updateJointStates) 

    # publish trajectory to pan-tilt controller
    self.m_win.m_joint_cmd_pub = rospy.Publisher(
        "pan_tilt_control/joint_command",
        trajectory_msgs.msg.JointTrajectory)

    self.m_win.showInfo("Pan-Tilt interface initialized.")

  #
  ## \brief Run application.
  ##    
  ## \param argv    Optional argument list to override command-line arguments.
  ## \param kwargs  Optional keyword argument list.
  ##
  ## \return Exit code.
  #
  def run(self, argv=None, **kwargs):
  
    # parse command-line options and arguments
    try:
      kwargs = self.getOptions(argv, **kwargs)
    except usage, e:
      print e.msg
      return 2

    # parse application configuration xml file
    xml = ConfigXml()
    config = xml.parse()
    del xml

    # create root 
    root = Tk()

    # create application window
    self.m_win = window(master=root, config=config)

    # destroy window on 'x'
    root.protocol('WM_DELETE_WINDOW', root.destroy)

    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)

    # initialize robot interface
    self.initRobot()

    # go for it
    self.m_win.mainloop()

    return 0


# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
if __name__ == '__main__':
  app = application();
  sys.exit( app.run() );
